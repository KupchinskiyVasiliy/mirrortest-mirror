name: Mirror repository

# Required secrets:
# OV_SOURCE_REPOSITORY_PAT_READ_REPO - Personal access token, that can be used to access source private repository
# OV_MIRROR_REPOSITORY_PAT_WRITE_REPO - Personal access token, that can be used to write to mirror repository
# (it should have 'contents' write and also 'workflow' write permission to overwrite .github/actions/*.yml files)

# Required variables:
# OV_SOURCE_ORGANIZATION - Organization of source repositories

on:
  workflow_dispatch:
#  Uncomment to automatically sync the repository on schedule
#  schedule:
#    - cron: "0 0 * * *"

env:
  GIT_USERNAME: 'ov-automation'
  GIT_EMAIL: 'github-actions@github.com'
  OLD_REPOSITORY_DIR_NAME: old-repository.git

jobs:
  mirror_repository:
    name: Mirror repository
    runs-on: ubuntu-latest
    steps:
      - name: Configure Git
        run: |
          git config --global --replace-all user.name "$GIT_USERNAME"
          git config --global --replace-all user.email "$GIT_EMAIL"

      - name: Clone source repository
        run: git clone --mirror 'https://${{ secrets.OV_SOURCE_REPOSITORY_PAT_READ_REPO }}@github.com/${{ vars.OV_SOURCE_ORGANIZATION }}/mirrortest-source.git' "$OLD_REPOSITORY_DIR_NAME"

      - name: Update mirror repository
        run: |
          cd "$OLD_REPOSITORY_DIR_NAME"
          git push --mirror 'https://token:${{ secrets.OV_MIRROR_REPOSITORY_PAT_WRITE_REPO }}@github.com/${{ github.repository }}.git'

      # GitHub automatically remove releases after remove related ref in repository. No need to do manual delete
      - name: Create new GitHub releases
        run: |
          SOURCE_RELEASES_URL='https://api.github.com/repos/${{ vars.OV_SOURCE_ORGANIZATION }}/mirrortest-source/releases'
          export SOURCE_RELEASES_JSON=$(curl -s -L \
            -H 'Authorization: Bearer ${{ secrets.OV_SOURCE_REPOSITORY_PAT_READ_REPO }}' \
            -H 'X-GitHub-Api-Version: 2022-11-28' \
            "$SOURCE_RELEASES_URL" \
            | tee response_body \
            | jq '[sort_by(.created_at, .published_at) | .[] | {tag_name: .tag_name, target_commitish: .target_commitish, name: .name, body: .body, draft: .draft, prerelease: .prerelease, generate_release_notes: false, make_latest: "legacy"}]')
          { [[ '${{ runner.debug }}' == '1' ]] && cat response_body; } || true
          
          SOURCE_TAG_NAMES=($(jq -r '.[] | .tag_name' <<< "$SOURCE_RELEASES_JSON"))
          echo "Source tag names: ${SOURCE_TAG_NAMES[@]}"

          export MIRROR_RELEASES_URL
          MIRROR_RELEASES_URL='https://api.github.com/repos/KupchinskiyVasiliy/mirrortest-mirror/releases'
          export MIRROR_TAG_NAMES
          MIRROR_TAG_NAMES=($(curl -s -L \
            -H 'Authorization: Bearer ${{ secrets.OV_MIRROR_REPOSITORY_PAT_WRITE_REPO }}' \
            -H 'X-GitHub-Api-Version: 2022-11-28' \
            "$MIRROR_RELEASES_URL" \
            | tee response_body \
            | jq -r '.[] | .tag_name'))
          { [[ '${{ runner.debug }}' == '1' ]] && cat response_body; } || true
          echo "Mirror tag names: ${MIRROR_TAG_NAMES[@]}"
          
          function create_github_release() {
            local TAG_NAME
            TAG_NAME="$1"
            CREATE_RELEASE_JSON="$(jq -c '.[] | select (.tag_name == $tagName)' --arg tagName "$TAG_NAME" <<< "$SOURCE_RELEASES_JSON")"
            echo "JSON to create release: $CREATE_RELEASE_JSON"

            curl -s -L \
              -X POST \
              -H 'Accept: application/vnd.github+json' \
              -H 'Authorization: Bearer ${{ secrets.OV_MIRROR_REPOSITORY_PAT_WRITE_REPO }}' \
              -H 'X-GitHub-Api-Version: 2022-11-28' \
              "$MIRROR_RELEASES_URL" \
              -d "$CREATE_RELEASE_JSON" > response_body
            { [[ '${{ runner.debug }}' == '1' ]] && cat response_body; } || true
          }
          
          function contains_mirror_tag() {
            local SOURCE_TAG
            SOURCE_TAG="$1"

            for MIRROR_TAG_NAME in "${MIRROR_TAG_NAMES[@]}"; do
              if [[ "$MIRROR_TAG_NAME" == "$SOURCE_TAG" ]]; then
                return 0
              fi
            done

            return 1
          }

          for SOURCE_TAG_NAME in "${SOURCE_TAG_NAMES[@]}"; do
            if contains_mirror_tag "$SOURCE_TAG_NAME"; then
              echo "Skipping release tag [$SOURCE_TAG_NAME]"
              continue
            fi

            echo "Creating release for tag [$SOURCE_TAG_NAME]"
            create_github_release "$SOURCE_TAG_NAME"
          done
